name: Build and Push Docker Image
on:
 schedule:
   - cron: '0 16 * * *'  # UTC 16:00 = 北京时间 00:00
 workflow_dispatch:  # 支持手动触发
 push:
   branches: [ main ]
   paths:
     - 'p115tiny302/**'
     - '.github/workflows/docker-build.yml'
     - 'Dockerfile'
env:
 DOCKER_IMAGE: xxllllll/p115tiny302
 PYPI_PACKAGE: p115tiny302
jobs:
 check-and-build:
   runs-on: ubuntu-latest
   
   steps:
     - name: Checkout code
       uses: actions/checkout@v4
     - name: Set up Python
       uses: actions/setup-python@v5
       with:
         python-version: '3.12'
     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip
         pip install requests
     - name: Get latest version from PyPI
       id: pypi_version
       run: |
         python p115tiny302/scripts/check_version.py ${{ env.PYPI_PACKAGE }} > version.txt
         echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
         echo "Latest version: $(cat version.txt)"
     - name: Check Docker Hub for existing image
       id: check_version
       run: |
         RESPONSE=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ env.DOCKER_IMAGE }}/tags/?page_size=100")
         if echo "$RESPONSE" | grep -q "\"name\":\"${{ steps.pypi_version.outputs.version }}\""; then
           echo "exists=true" >> $GITHUB_OUTPUT
           echo "Version ${{ steps.pypi_version.outputs.version }} already exists on Docker Hub"
         else
           echo "exists=false" >> $GITHUB_OUTPUT
           echo "Version ${{ steps.pypi_version.outputs.version }} does not exist on Docker Hub"
           echo "Response: $RESPONSE"
         fi
     - name: Prepare build context
       if: steps.check_version.outputs.exists == 'false'
       run: |
         # 显示当前目录结构
         echo "Current directory structure:"
         ls -R
         
         # 创建构建目录
         mkdir -p build
         
         # 复制所需文件
         cp p115tiny302/p115tiny302/requirements.txt build/
         cp p115tiny302/p115tiny302/main.py build/
         cp -r p115tiny302/p115tiny302/static build/
         cp -r p115tiny302/p115tiny302/templates build/
         cp p115tiny302/Dockerfile build/
         
         # 显示构建目录内容
         echo "Build directory contents:"
         ls -la build/
     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v3
       if: steps.check_version.outputs.exists == 'false'
     - name: Login to Docker Hub
       uses: docker/login-action@v3
       if: steps.check_version.outputs.exists == 'false'
       with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}
     - name: Build and push
       uses: docker/build-push-action@v5
       if: steps.check_version.outputs.exists == 'false'
       with:
         context: build
         push: true
         tags: |
           ${{ env.DOCKER_IMAGE }}:latest
           ${{ env.DOCKER_IMAGE }}:${{ steps.pypi_version.outputs.version }}
         cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
         cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
